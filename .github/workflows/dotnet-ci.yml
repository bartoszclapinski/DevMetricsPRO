name: .NET CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    # Only run if src/ folder exists (solution is created)
    if: github.event_name == 'push' && hashFiles('src/**') != '' || github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: devmetrics
          POSTGRES_PASSWORD: TestPassword123!
          POSTGRES_DB: devmetrics_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: |
        if [ -f "*.sln" ]; then
          dotnet restore
        else
          echo "⚠️ No solution file found yet. Skipping restore step."
          echo "This will work once Sprint 0 is complete and solution is created."
        fi
      continue-on-error: true

    - name: 🏗️ Build
      run: |
        if [ -f "*.sln" ]; then
          dotnet build --no-restore --configuration Release
        else
          echo "⚠️ No solution file found yet. Skipping build step."
        fi
      continue-on-error: true

    - name: 🧪 Run tests
      run: |
        if [ -f "*.sln" ]; then
          dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx
        else
          echo "⚠️ No solution file found yet. Skipping test step."
        fi
      continue-on-error: true

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/TestResults/**/*.trx'

    - name: 📈 Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: '**/TestResults/**/coverage.cobertura.xml'

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore

    - name: 🔍 Analyze code style
      run: dotnet build --no-restore /p:EnforceCodeStyleInBuild=true /p:TreatWarningsAsErrors=false
      continue-on-error: true

    - name: 🔒 Security scan with DevSkim
      uses: microsoft/DevSkim-Action@v1
      with:
        directory-to-scan: ./src

    - name: 📋 Format check
      run: dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  build-status:
    name: ✅ Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: always()

    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ] && [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "✅ All checks passed!"
          exit 0
        else
          echo "❌ Some checks failed"
          exit 1
        fi

