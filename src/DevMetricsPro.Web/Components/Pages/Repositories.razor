@page "/repositories"
@using DevMetricsPro.Web.Services
@using DevMetricsPro.Application.DTOs.GitHub
@inject AuthStateService AuthState
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<Repositories> Logger
@inject ISnackbar Snackbar

<PageTitle>Repositories - DevMetrics Pro</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">My Repositories</MudText>

@if (!_isAuthenticated)
{
    <MudAlert Severity="Severity.Warning">
        Please <MudLink Href="/login">login</MudLink> to view your repositories.
    </MudAlert>
}
else if (!_isGitHubConnected)
{
    <MudAlert Severity="Severity.Info">
        <MudText>You haven't connected your GitHub account yet.</MudText>
        <MudButton Href="/" Variant="Variant.Text" Color="Color.Primary" Class="mt-2">
            Go to Dashboard to Connect GitHub
        </MudButton>
    </MudAlert>
}
else if (_isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 400px;">
        <MudProgressCircular Size="Size.Large" Indeterminate="true" />
    </div>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <MudAlert Severity="Severity.Error" Class="mb-4">
        @_errorMessage
        <MudButton OnClick="LoadRepositoriesAsync" Variant="Variant.Text" Color="Color.Error" Class="mt-2">
            Retry
        </MudButton>
    </MudAlert>
}
else if (_repositories.Count == 0)
{
    <MudCard Elevation="2">
        <MudCardContent>
            <div style="text-align: center; padding: 60px 20px;">
                <MudIcon Icon="@Icons.Material.Filled.FolderOpen" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                <MudText Typo="Typo.h6" Class="mb-2">No Repositories Found</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    Click "Sync Now" to fetch your repositories from GitHub.
                </MudText>
                <MudButton 
                    Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    StartIcon="@Icons.Material.Filled.Sync"
                    OnClick="SyncRepositoriesAsync"
                    Disabled="_isSyncing">
                    Sync Now
                </MudButton>
            </div>
        </MudCardContent>
    </MudCard>
}
else
{
    <!-- Header with Sync Button -->
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
        <MudText Typo="Typo.body1" Color="Color.Secondary">
            @_repositories.Count repositories
            @if (_lastSyncTime.HasValue)
            {
                <span> â€¢ Last synced @GetRelativeTime(_lastSyncTime.Value)</span>
            }
        </MudText>
        <MudButton 
            Variant="Variant.Filled" 
            Color="Color.Primary" 
            StartIcon="@Icons.Material.Filled.Sync"
            OnClick="SyncRepositoriesAsync"
            Disabled="_isSyncing">
            @if (_isSyncing)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                <span>Syncing...</span>
            }
            else
            {
                <span>Sync Now</span>
            }
        </MudButton>
    </div>

    <!-- Repository Grid -->
    <MudGrid>
        @foreach (var repo in _repositories)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="2" Style="height: 100%;">
                    <MudCardContent>
                        <!-- Repository Name -->
                        <MudLink Href="@repo.HtmlUrl" Target="_blank" Underline="Underline.Hover">
                            <MudText Typo="Typo.h6" Style="margin-bottom: 8px;">
                                @repo.Name
                            </MudText>
                        </MudLink>

                        <!-- Description -->
                        @if (!string.IsNullOrEmpty(repo.Description))
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Style="margin-bottom: 12px; min-height: 40px;">
                                @(repo.Description.Length > 100 ? repo.Description.Substring(0, 100) + "..." : repo.Description)
                            </MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Style="margin-bottom: 12px; min-height: 40px; font-style: italic;">
                                No description provided
                            </MudText>
                        }

                        <!-- Language Badge -->
                        @if (!string.IsNullOrEmpty(repo.Language))
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Info" Style="margin-bottom: 12px;">
                                @repo.Language
                            </MudChip>
                        }

                        <!-- Stats -->
                        <div style="display: flex; gap: 16px; margin-top: 12px;">
                            <div style="display: flex; align-items: center; gap: 4px;">
                                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Color="Color.Warning" />
                                <MudText Typo="Typo.caption">@repo.StargazersCount</MudText>
                            </div>
                            <div style="display: flex; align-items: center; gap: 4px;">
                                <MudIcon Icon="@Icons.Material.Filled.CallSplit" Size="Size.Small" Color="Color.Info" />
                                <MudText Typo="Typo.caption">@repo.ForksCount</MudText>
                            </div>
                            <div style="display: flex; align-items: center; gap: 4px;">
                                <MudIcon Icon="@Icons.Material.Filled.BugReport" Size="Size.Small" Color="Color.Error" />
                                <MudText Typo="Typo.caption">@repo.OpenIssuesCount</MudText>
                            </div>
                        </div>

                        <!-- Badges -->
                        <div style="margin-top: 12px; display: flex; gap: 8px;">
                            @if (repo.IsPrivate)
                            {
                                <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Warning">
                                    Private
                                </MudChip>
                            }
                            @if (repo.IsFork)
                            {
                                <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Info">
                                    Fork
                                </MudChip>
                            }
                        </div>

                        <!-- Last Updated -->
                        @if (repo.PushedAt.HasValue)
                        {
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Style="margin-top: 12px;">
                                Updated @GetRelativeTime(repo.PushedAt.Value)
                            </MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private bool _isAuthenticated = false;
    private bool _isGitHubConnected = false;
    private bool _isLoading = true;
    private bool _isSyncing = false;
    private string? _errorMessage;
    private DateTime? _lastSyncTime;
    private List<GitHubRepositoryDto> _repositories = new();

    protected override async Task OnInitializedAsync()
    {
        _isAuthenticated = await AuthState.IsAuthenticatedAsync();
        
        if (_isAuthenticated)
        {
            await CheckGitHubConnectionAsync();
            
            if (_isGitHubConnected)
            {
                await LoadRepositoriesAsync();
            }
        }
        
        _isLoading = false;
    }

    private async Task CheckGitHubConnectionAsync()
    {
        try
        {
            var token = await AuthState.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
                return;

            var request = new HttpRequestMessage(HttpMethod.Get, "/api/github/status");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var status = await response.Content.ReadFromJsonAsync<GitHubStatusResponse>();
                _isGitHubConnected = status?.Connected == true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking GitHub connection status");
        }
    }

    private async Task LoadRepositoriesAsync()
    {
        _isLoading = true;
        _errorMessage = null;
        
        try
        {
            var token = await AuthState.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Post, "/api/github/sync-repositories");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.SendAsync(request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SyncRepositoriesResponse>();
                if (result?.Success == true && result.Repositories != null)
                {
                    _repositories = result.Repositories.OrderByDescending(r => r.StargazersCount).ToList();
                    _lastSyncTime = DateTime.UtcNow;
                    Logger.LogInformation("Loaded {Count} repositories", _repositories.Count);
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                _errorMessage = "Failed to load repositories. Please try again.";
                Logger.LogError("Failed to load repositories. Status: {StatusCode}", response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading repositories");
            _errorMessage = "An error occurred while loading repositories.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SyncRepositoriesAsync()
    {
        _isSyncing = true;
        
        try
        {
            await LoadRepositoriesAsync();
            
            if (string.IsNullOrEmpty(_errorMessage))
            {
                Snackbar.Add($"Successfully synced {_repositories.Count} repositories!", Severity.Success);
            }
        }
        finally
        {
            _isSyncing = false;
        }
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalDays < 30)
            return $"{(int)timeSpan.TotalDays} days ago";
        if (timeSpan.TotalDays < 365)
            return $"{(int)(timeSpan.TotalDays / 30)} months ago";
        
        return $"{(int)(timeSpan.TotalDays / 365)} years ago";
    }

    // Response wrapper classes specific to this UI
    private class SyncRepositoriesResponse
    {
        public bool Success { get; set; }
        public int Count { get; set; }
        public List<GitHubRepositoryDto>? Repositories { get; set; }
    }

    private class GitHubStatusResponse
    {
        public bool Connected { get; set; }
        public string? Username { get; set; }
    }
}