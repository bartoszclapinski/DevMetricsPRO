@page "/register"
@using DevMetricsPro.Application.DTOs.Auth
@using System.Net.Http.Json
@using DevMetricsPro.Web.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthStateService AuthState

<PageTitle>Register - DevMetrics Analytics</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <h1 class="auth-title">CREATE ACCOUNT</h1>
        </div>
        
        <div class="auth-body">
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="auth-error">
                    @_errorMessage
                </div>
            }
            
            @if (_registrationSuccess)
            {
                <div class="auth-success">
                    <strong>Success!</strong> Account created. Redirecting to dashboard...
                </div>
            }
            else
            {
                <EditForm Model="@_registerRequest" OnValidSubmit="HandleRegister">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group">
                        <label class="form-label">EMAIL ADDRESS</label>
                        <InputText @bind-Value="_registerRequest.Email" 
                                   class="form-input" 
                                   placeholder="your.email@company.com" />
                        <ValidationMessage For="@(() => _registerRequest.Email)" class="validation-message" />
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">PASSWORD</label>
                        <InputText @bind-Value="_registerRequest.Password" 
                                   type="password" 
                                   class="form-input" 
                                   placeholder="••••••••" />
                        <ValidationMessage For="@(() => _registerRequest.Password)" class="validation-message" />
                        <small class="form-hint">Minimum 8 characters, must include uppercase, lowercase, and digit</small>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">CONFIRM PASSWORD</label>
                        <InputText @bind-Value="_registerRequest.ConfirmPassword" 
                                   type="password" 
                                   class="form-input" 
                                   placeholder="••••••••" />
                        <ValidationMessage For="@(() => _registerRequest.ConfirmPassword)" class="validation-message" />
                    </div>
                    
                    <button type="submit" class="btn-primary" disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <span>Creating account...</span>
                        }
                        else
                        {
                            <span>Create Account</span>
                        }
                    </button>
                </EditForm>
                
                <div class="auth-footer">
                    <span class="text-muted">Already have an account?</span>
                    <a href="/login" class="auth-link">Login here</a>
                </div>
            }
        </div>
    </div>
</div>

<style>
    /* Reuse the same professional styling from Login */
    .auth-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #FAFBFC;
        padding: 16px;
    }
    
    .auth-card {
        width: 100%;
        max-width: 400px;
        background: #FFFFFF;
        border: 1px solid #E1E4E8;
        border-radius: 4px;
        box-shadow: 0 1px 3px rgba(27, 31, 35, 0.06);
    }
    
    .auth-header {
        padding: 20px;
        border-bottom: 1px solid #E1E4E8;
        background: #F6F8FA;
    }
    
    .auth-title {
        margin: 0;
        font-size: 13px;
        font-weight: 600;
        color: #24292E;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .auth-body {
        padding: 24px;
    }
    
    .auth-error {
        padding: 12px;
        background: rgba(215, 58, 73, 0.1);
        border: 1px solid #D73A49;
        border-radius: 4px;
        color: #D73A49;
        font-size: 13px;
        margin-bottom: 16px;
    }
    
    .auth-success {
        padding: 12px;
        background: rgba(40, 167, 69, 0.1);
        border: 1px solid #28A745;
        border-radius: 4px;
        color: #28A745;
        font-size: 13px;
        margin-bottom: 16px;
    }
    
    .form-group {
        margin-bottom: 16px;
    }
    
    .form-label {
        display: block;
        font-size: 11px;
        font-weight: 500;
        color: #586069;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 6px;
    }
    
    .form-input {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #E1E4E8;
        border-radius: 4px;
        background: #FFFFFF;
        color: #24292E;
        font-size: 14px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
        transition: border-color 0.15s;
    }
    
    .form-input:focus {
        outline: none;
        border-color: #0366D6;
        box-shadow: 0 0 0 3px rgba(3, 102, 214, 0.1);
    }
    
    .form-hint {
        display: block;
        margin-top: 4px;
        font-size: 11px;
        color: #6A737D;
    }
    
    .btn-primary {
        width: 100%;
        padding: 10px 16px;
        background: #0366D6;
        color: #FFFFFF;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.15s;
        margin-top: 8px;
    }
    
    .btn-primary:hover:not(:disabled) {
        background: #0256C5;
    }
    
    .btn-primary:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
    
    .auth-footer {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #E1E4E8;
        text-align: center;
        font-size: 13px;
    }
    
    .text-muted {
        color: #6A737D;
    }
    
    .auth-link {
        color: #0366D6;
        text-decoration: none;
        margin-left: 4px;
    }
    
    .auth-link:hover {
        text-decoration: underline;
    }
    
    .validation-message {
        display: block;
        margin-top: 4px;
        font-size: 12px;
        color: #D73A49;
    }
</style>

@code {
    private RegisterRequest _registerRequest = new();
    private string _errorMessage = string.Empty;
    private bool _isLoading = false;
    private bool _registrationSuccess = false;
    
    private async Task HandleRegister()
    {
        _isLoading = true;
        _errorMessage = string.Empty;
        
        try
        {
            var response = await Http.PostAsJsonAsync("/api/auth/register", _registerRequest);
            
            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                
                _registrationSuccess = true;
                
                // Save token to localStorage
                if (authResponse != null && !string.IsNullOrEmpty(authResponse.Token))
                {
                    await AuthState.SaveTokenAsync(authResponse.Token);
                }

                await Task.Delay(2000);
                Navigation.NavigateTo("/");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _errorMessage = "Registration failed. Please check your information and try again.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }
}